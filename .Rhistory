)[i - 7],
choices = c(
"1: Strongly Disagree" = 1,
"2: Disagree" = 2,
"3: Slightly Disagree" = 3,
"4: Neutral" = 4,
"5: Slightly Agree" = 5,
"6: Agree" = 6,
"7: Strongly Agree" = 7
)
)
}),
h4("🔴 Social Phobia Inventory (SPIN)"),
tagList(
lapply(13:29, function(i) {
selectInput(
paste0("Q", i),
label = spin_questions[i - 12],
choices = c(
"0: Not at all" = 0,
"1: A little bit" = 1,
"2: Somewhat" = 2,
"3: Very much" = 3,
"4: Extremely" = 4
)
)
})
),
br(),
actionButton("submit", "Predict", class = "btn-primary btn-lg")
),
mainPanel(
h3("Prediction Result:"),
verbatimTextOutput("result"),
hr(),
h3("🎮 Game Recommendation & Quote:"),
verbatimTextOutput("recommendation"),
hr(),
DTOutput("table")
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$submit, {
# Validate 'whyplay'
whyplay_input <- if (input$whyplay == "Other") {
if (is.null(input$whyplay_other) || trimws(input$whyplay_other) == "") {
showNotification("⚠️ Please provide a valid reason for 'Why you play games'.", type = "error")
return()
} else {
input$whyplay_other
}
} else {
input$whyplay
}
# Validate 'degree'
degree_input <- if (input$degree == "Other") {
if (is.null(input$degree_other) || trimws(input$degree_other) == "") {
showNotification("⚠️ Please provide a valid degree/qualification.", type = "error")
return()
} else {
input$degree_other
}
} else {
input$degree
}
# Collect questionnaire answers
question_values <- sapply(1:29, function(i) {
val <- input[[paste0("Q", i)]]
if (is.null(val) || val == "") NA else as.numeric(val)
})
# Check for any missing answers
if (any(is.na(question_values))) {
showNotification("⚠️ Please answer all the questionnaire items.", type = "error")
return()
}
# Calculate total scores
GAD_T <- sum(question_values[1:7])
SWL_T <- sum(question_values[8:12])
SPIN_T <- sum(question_values[13:29])
# Prepare input data frame for prediction
input_data <- as.data.frame(t(c(question_values, GAD_T = GAD_T, SWL_T = SWL_T, SPIN_T = SPIN_T)))
colnames(input_data) <- c(paste0("Q", 1:29), "GAD_T", "SWL_T", "SPIN_T")
# Predict anxiety type
prediction <- tryCatch({
predict(rf_model, newdata = input_data)
}, error = function(e) {
paste("Prediction error:", e$message)
})
# Show prediction result
output$result <- renderText({
paste("🎯 Predicted Anxiety Type:", prediction)
})
# Show recommendation
recommendation <- recommend_content(as.character(prediction))
output$recommendation <- renderText({
paste0("Recommended Game: ", recommendation$game, "\n",
"Quote: ", recommendation$quote)
})
# Show summary table
display_data <- data.frame(
GAD_Total = GAD_T,
SWL_Total = SWL_T,
SPIN_Total = SPIN_T,
Predicted_Anxiety_Type = prediction,
stringsAsFactors = FALSE
)
output$table <- renderDT({
datatable(
display_data,
options = list(dom = 't', ordering = FALSE),
rownames = FALSE
)
})
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(shinyjs)
library(DT)
library(randomForest)
# Load trained Random Forest model (adjust path if needed)
rf_model <- readRDS("models/random_forest_model.rds")
# Load dataset to get feature columns (adjust path if needed)
dataset <- read.csv("cleaned_gaming_dataset_final.csv")
# Define SPIN questions
spin_questions <- c(
"I fear talking to strangers.",
"I avoid activities where I am the center of attention.",
"I feel anxious when making eye contact with people.",
"I fear being embarrassed or looking foolish.",
"I feel uncomfortable eating or drinking in front of others.",
"I avoid speaking in public because of fear.",
"I experience anxiety in social gatherings.",
"I have difficulty interacting with people I don't know well.",
"I worry about being judged by others.",
"I feel uncomfortable when being introduced to new people.",
"I get extremely anxious when I have to perform in front of others.",
"I experience panic when meeting authority figures.",
"I tend to avoid social situations due to fear.",
"I have trouble starting conversations.",
"I fear being criticized in public.",
"I find it difficult to mix with people.",
"I avoid being in crowded places."
)
# Recommendation function
recommend_content <- function(anxiety_type) {
recommendation <- list()
if (anxiety_type == "GAD") {
recommendation$game <- "Monument Valley (calm puzzle game)"
recommendation$quote <- "You are stronger than you think, and you are not alone."
} else if (anxiety_type == "SAD") {
recommendation$game <- "Stardew Valley (social-friendly farming game)"
recommendation$quote <- "Take one step at a time, and you will get there."
} else if (anxiety_type == "Mixed_Anxiety") {
recommendation$game <- "Journey (relaxing adventure game)"
recommendation$quote <- "Breathe. Trust yourself. You are capable of overcoming this."
} else if (anxiety_type == "No_Anxiety") {
recommendation$game <- "Enjoy any game you like!"
recommendation$quote <- "No anxiety detected. Keep up the great work and enjoy gaming responsibly!"
} else {
recommendation$game <- NA
recommendation$quote <- "Keep enjoying your journey!"
}
return(recommendation)
}
# UI
ui <- fluidPage(
theme = shinytheme("flatly"),
useShinyjs(),
# Background image CSS
tags$head(
tags$style(HTML("
body {
background-image: url('gaming1.jpg');
background-size: cover;
background-attachment: fixed;
background-position: center;
background-repeat: no-repeat;
}
.well, .panel, .form-control, .selectize-input {
background-color: rgba(255, 255, 255, 0.85) !important;
}
.shiny-input-container {
background-color: rgba(255, 255, 255, 0.85) !important;
padding: 10px;
border-radius: 10px;
}
.btn-primary {
background-color: #337ab7;
border-color: #2e6da4;
}
"))
),
titlePanel("🎮 Online Gaming Anxiety Prediction"),
sidebarLayout(
sidebarPanel(
h4("Answer the questions below:"),
hr(),
h4("🧑 Demographic and Background Info"),
selectInput("gender", "Gender:", choices = c("Male", "Female", "Other")),
selectInput("whyplay", "Why do you play games?",
choices = c("Stress Relief", "Entertainment", "Social Interaction", "Competition", "Other")),
conditionalPanel(
condition = "input.whyplay == 'Other'",
textInput("whyplay_other", "Please specify your reason:")
),
numericInput("hours", "Average gaming hours per day:", value = 2, min = 0),
selectInput("degree", "Current degree/course:",
choices = c("BTech", "BSc", "BA", "MTech", "MSc", "Other")),
conditionalPanel(
condition = "input.degree == 'Other'",
textInput("degree_other", "Please specify your qualification:")
),
selectInput("work", "Are you working currently?", choices = c("Yes", "No")),
hr(),
h4("🟡 Generalized Anxiety Disorder (GAD)"),
lapply(1:7, function(i) {
selectInput(
paste0("Q", i),
label = c(
"How often have you felt nervous, anxious, or on edge?",
"How often have you had trouble relaxing?",
"How often have you felt so restless that it's hard to sit still?",
"How often have you felt afraid as if something awful might happen?",
"How often have you felt easily annoyed or irritable?",
"How often have you felt worried about different things?",
"How often have you had difficulty controlling your worrying?"
)[i],
choices = c("0: Not at all" = 0, "1: Several days" = 1, "2: More than half the days" = 2, "3: Nearly every day" = 3)
)
}),
h4("🔵 Satisfaction With Life Scale (SWL)"),
lapply(8:12, function(i) {
selectInput(
paste0("Q", i),
label = c(
"In most ways, my life is close to my ideal.",
"The conditions of my life are excellent.",
"I am satisfied with my life.",
"So far, I have gotten the important things I want in life.",
"If I could live my life over, I would change almost nothing."
)[i - 7],
choices = c(
"1: Strongly Disagree" = 1,
"2: Disagree" = 2,
"3: Slightly Disagree" = 3,
"4: Neutral" = 4,
"5: Slightly Agree" = 5,
"6: Agree" = 6,
"7: Strongly Agree" = 7
)
)
}),
h4("🔴 Social Phobia Inventory (SPIN)"),
tagList(
lapply(13:29, function(i) {
selectInput(
paste0("Q", i),
label = spin_questions[i - 12],
choices = c(
"0: Not at all" = 0,
"1: A little bit" = 1,
"2: Somewhat" = 2,
"3: Very much" = 3,
"4: Extremely" = 4
)
)
})
),
br(),
actionButton("submit", "Predict", class = "btn-primary btn-lg")
),
mainPanel(
h3("Prediction Result:"),
verbatimTextOutput("result"),
hr(),
h3("🎮 Game Recommendation & Quote:"),
verbatimTextOutput("recommendation"),
hr(),
DTOutput("table")
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$submit, {
# Validate 'whyplay'
whyplay_input <- if (input$whyplay == "Other") {
if (is.null(input$whyplay_other) || trimws(input$whyplay_other) == "") {
showNotification("⚠️ Please provide a valid reason for 'Why you play games'.", type = "error")
return()
} else {
input$whyplay_other
}
} else {
input$whyplay
}
# Validate 'degree'
degree_input <- if (input$degree == "Other") {
if (is.null(input$degree_other) || trimws(input$degree_other) == "") {
showNotification("⚠️ Please provide a valid degree/qualification.", type = "error")
return()
} else {
input$degree_other
}
} else {
input$degree
}
# Collect questionnaire answers
question_values <- sapply(1:29, function(i) {
val <- input[[paste0("Q", i)]]
if (is.null(val) || val == "") NA else as.numeric(val)
})
# Check for any missing answers
if (any(is.na(question_values))) {
showNotification("⚠️ Please answer all the questionnaire items.", type = "error")
return()
}
# Calculate total scores
GAD_T <- sum(question_values[1:7])
SWL_T <- sum(question_values[8:12])
SPIN_T <- sum(question_values[13:29])
# Prepare input data frame for prediction
input_data <- as.data.frame(t(c(question_values, GAD_T = GAD_T, SWL_T = SWL_T, SPIN_T = SPIN_T)))
colnames(input_data) <- c(paste0("Q", 1:29), "GAD_T", "SWL_T", "SPIN_T")
# Predict anxiety type
prediction <- tryCatch({
predict(rf_model, newdata = input_data)
}, error = function(e) {
paste("Prediction error:", e$message)
})
# Show prediction result
output$result <- renderText({
paste("🎯 Predicted Anxiety Type:", prediction)
})
# Show recommendation
recommendation <- recommend_content(as.character(prediction))
output$recommendation <- renderText({
paste0("Recommended Game: ", recommendation$game, "\n",
"Quote: ", recommendation$quote)
})
# Show summary table
display_data <- data.frame(
GAD_Total = GAD_T,
SWL_Total = SWL_T,
SPIN_Total = SPIN_T,
Predicted_Anxiety_Type = prediction,
stringsAsFactors = FALSE
)
output$table <- renderDT({
datatable(
display_data,
options = list(dom = 't', ordering = FALSE),
rownames = FALSE
)
})
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(dplyr)
library(randomForest)
library(caret)
library(ggplot2)
library(reshape2)
library(FNN)
library(corrplot)
# Read dataset
df <- read.csv("D:/VIT/SEM 4/Data Science/CP/Shiny/gaming_anxiety_prediction/data/cleaned_gaming_dataset_final.csv")
# Drop Anxiety_Type temporarily for correlation analysis
df_cleaned <- df %>% select(-Anxiety_Type)
# Convert categorical variables to numeric
df_cleaned$whyplay <- as.numeric(factor(df_cleaned$whyplay))
df_cleaned$Gender <- as.numeric(factor(df_cleaned$Gender))
df_cleaned$Work <- as.numeric(factor(df_cleaned$Work))
df_cleaned$Degree <- as.numeric(factor(df_cleaned$Degree))
# Compute correlation matrix
cor_matrix <- cor(df_cleaned, use = "complete.obs")
print(cor_matrix)
# Visualize correlation using a heatmap
melted_cor <- melt(cor_matrix)
ggplot(data = melted_cor, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0) +
labs(title = "Correlation Heatmap", x = "Features", y = "Features") +
theme_minimal()
# Alternative: Use corrplot
corrplot(cor_matrix, method = "color", type = "lower", tl.col = "black", tl.srt = 45)
# Visualize correlation using a heatmap
melted_cor <- melt(cor_matrix)
ggplot(data = melted_cor, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0) +
labs(title = "Correlation Heatmap", x = "Features", y = "Features") +
theme_minimal()
# Alternative: Use corrplot
corrplot(cor_matrix, method = "color", type = "lower", tl.col = "black", tl.srt = 45)
# Restore Anxiety_Type column
df_cleaned$Anxiety_Type <- ifelse(
df$GAD_T >= 10 & df$SPIN_T >= 19, "Mixed_Anxiety",
ifelse(df$GAD_T >= 10, "GAD",
ifelse(df$SPIN_T >= 19, "SAD",
"No_Anxiety")))
# Convert to factor
df_cleaned$Anxiety_Type <- factor(df_cleaned$Anxiety_Type)
# Save cleaned dataset
write.csv(df_cleaned, "D:/VIT/SEM 4/Data Science/CP/Shiny/gaming_anxiety_prediction/data/cleaned_gaming_dataset_final.csv", row.names = FALSE)
manual_SMOTE <- function(data, target_col, class_label, N = 100, k = 5) {
minority_samples <- data[data[[target_col]] == class_label, ]
features <- data[, !names(data) %in% target_col]
minority_features <- minority_samples[, !names(minority_samples) %in% target_col]
knn_result <- get.knnx(data = minority_features, query = minority_features, k = k + 1)
synthetic_samples <- data.frame()
for (i in 1:nrow(minority_features)) {
for (j in 2:(k + 1)) {
neighbor_idx <- knn_result$nn.index[i, j]
neighbor <- minority_features[neighbor_idx, ]
gap <- runif(1)
new_sample <- minority_features[i, ] + gap * (neighbor - minority_features[i, ])
new_sample[target_col] <- class_label
synthetic_samples <- rbind(synthetic_samples, new_sample)
if (nrow(synthetic_samples) >= (N / 100) * nrow(minority_samples)) break
}
}
balanced_data <- rbind(data, synthetic_samples)
return(balanced_data)
}
df_balanced <- df_cleaned
df_balanced$whyplay <- as.numeric(as.factor(df_balanced$whyplay))
df_balanced$Gender <- as.numeric(as.factor(df_balanced$Gender))
df_balanced$Work <- as.numeric(as.factor(df_balanced$Work))
df_balanced$Degree <- as.numeric(as.factor(df_balanced$Degree))
df_balanced$Anxiety_Type <- as.numeric(as.factor(df_balanced$Anxiety_Type))
set.seed(123)
df_balanced <- manual_SMOTE(df_balanced, target_col = "Anxiety_Type", class_label = 1, N = 200, k = 5)
df_balanced <- manual_SMOTE(df_balanced, target_col = "Anxiety_Type", class_label = 2, N = 100, k = 5)
table(df_balanced$Anxiety_Type)
df$Anxiety_Type <- as.factor(df$Anxiety_Type)
# Remove highly correlated features (GAD_T and SPIN_T are usually correlated)
df <- df %>% select(-SWL_T)
# Split data into training (70%) and testing (30%)
set.seed(42)
train_index <- createDataPartition(df$Anxiety_Type, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Add slight noise to numerical features to avoid overfitting
num_cols <- sapply(train_data, is.numeric)
noise_level <- 0.01
train_data[num_cols] <- train_data[num_cols] +
rnorm(n = sum(num_cols) * nrow(train_data), mean = 0, sd = noise_level)
# Train Random Forest Model with controlled complexity
rf_model <- randomForest(
Anxiety_Type ~ .,
data = train_data,
ntree = 80,      # Limit number of trees
mtry = 3,        # Limit features per split
nodesize = 5,    # Increase node size to prevent overfitting
importance = TRUE
)
# Model Evaluation
predictions <- predict(rf_model, newdata = test_data)
conf_matrix <- confusionMatrix(predictions, test_data$Anxiety_Type)
# Print results
print(conf_matrix)
# Calculate Accuracy
accuracy <- sum(diag(conf_matrix$table)) / sum(conf_matrix$table)
cat("\nFinal Model Accuracy:", round(accuracy * 100, 2), "%\n")
conf_matrix <- confusionMatrix(predictions, test_data$Anxiety_Type)
# Print Confusion Matrix
print(conf_matrix)
# Convert to a table for better visualization
conf_table <- as.table(conf_matrix$table)
# Display as a heatmap using ggplot2
library(ggplot2)
conf_df <- as.data.frame(conf_table)
colnames(conf_df) <- c("Actual", "Predicted", "Freq")
ggplot(conf_df, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), color = "black", size = 6) +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Confusion Matrix Heatmap", x = "Actual", y = "Predicted") +
theme_minimal()
train_predictions <- predict(rf_model, newdata = train_data)
train_conf_matrix <- confusionMatrix(train_predictions, train_data$Anxiety_Type)
# Training Accuracy
train_accuracy <- sum(diag(train_conf_matrix$table)) / sum(train_conf_matrix$table)
# Testing Accuracy (Already Computed)
test_accuracy <- sum(diag(conf_matrix$table)) / sum(conf_matrix$table)
accuracy_df <- data.frame(
Dataset = c("Training", "Testing"),
Accuracy = c(train_accuracy, test_accuracy)
)
library(ggplot2)
ggplot(accuracy_df, aes(x = Dataset, y = Accuracy, fill = Dataset)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = paste0(round(Accuracy * 100, 2), "%")), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("blue", "red")) +
labs(title = "Training vs Testing Accuracy", x = "Dataset", y = "Accuracy") +
ylim(0, 1) +
theme_minimal()
ggplot(accuracy_df, aes(x = Dataset, y = Accuracy, fill = Dataset)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = paste0(round(Accuracy * 100, 2), "%")), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("blue", "red")) +
labs(title = "Training vs Testing Accuracy", x = "Dataset", y = "Accuracy") +
ylim(0, 1) +
theme_minimal()
